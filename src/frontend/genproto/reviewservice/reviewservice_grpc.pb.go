// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reviewservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReviewServiceClient is the client API for ReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewServiceClient interface {
	PutReviews(ctx context.Context, in *Review, opts ...grpc.CallOption) (*Empty, error)
	GetReviews(ctx context.Context, in *Product, opts ...grpc.CallOption) (ReviewService_GetReviewsClient, error)
}

type reviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewServiceClient(cc grpc.ClientConnInterface) ReviewServiceClient {
	return &reviewServiceClient{cc}
}

func (c *reviewServiceClient) PutReviews(ctx context.Context, in *Review, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/reviewservice.ReviewService/putReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) GetReviews(ctx context.Context, in *Product, opts ...grpc.CallOption) (ReviewService_GetReviewsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReviewService_ServiceDesc.Streams[0], "/reviewservice.ReviewService/getReviews", opts...)
	if err != nil {
		return nil, err
	}
	x := &reviewServiceGetReviewsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReviewService_GetReviewsClient interface {
	Recv() (*Review, error)
	grpc.ClientStream
}

type reviewServiceGetReviewsClient struct {
	grpc.ClientStream
}

func (x *reviewServiceGetReviewsClient) Recv() (*Review, error) {
	m := new(Review)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReviewServiceServer is the server API for ReviewService service.
// All implementations must embed UnimplementedReviewServiceServer
// for forward compatibility
type ReviewServiceServer interface {
	PutReviews(context.Context, *Review) (*Empty, error)
	GetReviews(*Product, ReviewService_GetReviewsServer) error
	mustEmbedUnimplementedReviewServiceServer()
}

// UnimplementedReviewServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReviewServiceServer struct {
}

func (UnimplementedReviewServiceServer) PutReviews(context.Context, *Review) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutReviews not implemented")
}
func (UnimplementedReviewServiceServer) GetReviews(*Product, ReviewService_GetReviewsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetReviews not implemented")
}
func (UnimplementedReviewServiceServer) mustEmbedUnimplementedReviewServiceServer() {}

// UnsafeReviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewServiceServer will
// result in compilation errors.
type UnsafeReviewServiceServer interface {
	mustEmbedUnimplementedReviewServiceServer()
}

func RegisterReviewServiceServer(s grpc.ServiceRegistrar, srv ReviewServiceServer) {
	s.RegisterService(&ReviewService_ServiceDesc, srv)
}

func _ReviewService_PutReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Review)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).PutReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reviewservice.ReviewService/putReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).PutReviews(ctx, req.(*Review))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_GetReviews_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Product)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReviewServiceServer).GetReviews(m, &reviewServiceGetReviewsServer{stream})
}

type ReviewService_GetReviewsServer interface {
	Send(*Review) error
	grpc.ServerStream
}

type reviewServiceGetReviewsServer struct {
	grpc.ServerStream
}

func (x *reviewServiceGetReviewsServer) Send(m *Review) error {
	return x.ServerStream.SendMsg(m)
}

// ReviewService_ServiceDesc is the grpc.ServiceDesc for ReviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reviewservice.ReviewService",
	HandlerType: (*ReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "putReviews",
			Handler:    _ReviewService_PutReviews_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getReviews",
			Handler:       _ReviewService_GetReviews_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "reviewservice.proto",
}
